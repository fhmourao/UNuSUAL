/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unexpectednessevaluationtool;

import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.ListModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author labpi
 */
public class UnexpectednessEvaluationFrame extends javax.swing.JFrame {
    
    private static ParametersEvaluation parameters;
    private int contRecommendation = 0;
    private String executionLog;
    private String lastFolder = ".";

    /**
     * Creates new form UnexpectednessEvaluationFrame
     */
    public UnexpectednessEvaluationFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton4 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRecommendationLists = new javax.swing.JTable();
        btnAddRecommendation = new javax.swing.JButton();
        btnSelectConsumptionHistory = new javax.swing.JButton();
        lblConsumptionHistory = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnSelectItemsFeatures = new javax.swing.JButton();
        lblItemsFeaturesFile = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblOutput = new javax.swing.JLabel();
        btnOutputFolder = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        btnPPM = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        chkMetric1 = new javax.swing.JCheckBox();
        chkMetric2 = new javax.swing.JCheckBox();
        chkMetric3 = new javax.swing.JCheckBox();
        chkMetric4 = new javax.swing.JCheckBox();
        chkMetric5 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        btnLoadNewMetrics = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNewMetrics = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        chkEnableStatisticalSummarization = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        chkMean = new javax.swing.JCheckBox();
        chkMedian = new javax.swing.JCheckBox();
        chkStandardDeviation = new javax.swing.JCheckBox();
        chkRank = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        chkEnableStatisticalAnalysis = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        txtBinSize = new javax.swing.JTextField();
        chkItemPopularity = new javax.swing.JCheckBox();
        chkHistorySize = new javax.swing.JCheckBox();
        chkUserBias = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        chkSimilarityAnalysis = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        chkKendall = new javax.swing.JCheckBox();
        chkPearson = new javax.swing.JCheckBox();
        chkSpearman = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        chkEnableCombinationAnalysis = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        chkSVD = new javax.swing.JCheckBox();
        chkPCA = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        chkKPCA = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstKernel = new javax.swing.JList<>();
        jPanel13 = new javax.swing.JPanel();
        btnCombinationMethods = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        btnRun = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel1.setText("Consumption History");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel2.setText("Recommendation List");

        tblRecommendationLists.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# ID", "Name", "# Items", "# Recommendations", "Type", "File Size"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRecommendationLists.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRecommendationListsMouseClicked(evt);
            }
        });
        tblRecommendationLists.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblRecommendationListsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblRecommendationLists);

        btnAddRecommendation.setText("Add Recommendation");
        btnAddRecommendation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddRecommendationActionPerformed(evt);
            }
        });

        btnSelectConsumptionHistory.setText("Select Consumption History File ");
        btnSelectConsumptionHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectConsumptionHistoryActionPerformed(evt);
            }
        });

        lblConsumptionHistory.setText("File Not Selected");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel6.setText("Items Features File");

        btnSelectItemsFeatures.setText("Select Items Features File");
        btnSelectItemsFeatures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectItemsFeaturesActionPerformed(evt);
            }
        });

        lblItemsFeaturesFile.setText("File Not Selected");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel8.setText("Output");

        lblOutput.setText("Folder Not Selected");

        btnOutputFolder.setText("Select Output Folder");
        btnOutputFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutputFolderActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel9.setText("PPM");

        btnPPM.setText("Select Primitive Predictor List");
        btnPPM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPPMActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblConsumptionHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblItemsFeaturesFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblOutput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)))
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddRecommendation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnPPM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnOutputFolder, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnSelectItemsFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnSelectConsumptionHistory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnSelectConsumptionHistory)
                    .addComponent(lblConsumptionHistory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(btnSelectItemsFeatures)
                    .addComponent(lblItemsFeaturesFile))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOutputFolder)
                    .addComponent(lblOutput)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPPM)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddRecommendation)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Input/Output Configuration", jPanel1);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Unexpectedness Metrics"));

        chkMetric1.setText("Metric 1");
        chkMetric1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMetric1ActionPerformed(evt);
            }
        });

        chkMetric2.setText("Metric 2");
        chkMetric2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMetric2ActionPerformed(evt);
            }
        });

        chkMetric3.setText("Metric 3");
        chkMetric3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMetric3ActionPerformed(evt);
            }
        });

        chkMetric4.setText("Metric 4");
        chkMetric4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMetric4ActionPerformed(evt);
            }
        });

        chkMetric5.setText("Metric 5");
        chkMetric5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMetric5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkMetric1)
                    .addComponent(chkMetric2)
                    .addComponent(chkMetric3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkMetric4)
                    .addComponent(chkMetric5))
                .addGap(150, 150, 150))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMetric1)
                    .addComponent(chkMetric4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMetric2)
                    .addComponent(chkMetric5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkMetric3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Customized Metrics"));

        btnLoadNewMetrics.setText("Load New Metrics");
        btnLoadNewMetrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadNewMetricsActionPerformed(evt);
            }
        });

        tblNewMetrics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Metric", "File"
            }
        ));
        jScrollPane2.setViewportView(tblNewMetrics);
        if (tblNewMetrics.getColumnModel().getColumnCount() > 0) {
            tblNewMetrics.getColumnModel().getColumn(0).setResizable(false);
            tblNewMetrics.getColumnModel().getColumn(1).setResizable(false);
        }

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(btnLoadNewMetrics)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLoadNewMetrics)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        jPanel5.getAccessibleContext().setAccessibleName("");
        jPanel5.getAccessibleContext().setAccessibleDescription("");

        jTabbedPane2.addTab("Evaluation of Unexpectedness", jPanel2);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Behavioural Analysis"));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistical Summarization"));

        chkEnableStatisticalSummarization.setText("Enable Statistical Summarization");
        chkEnableStatisticalSummarization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEnableStatisticalSummarizationActionPerformed(evt);
            }
        });

        jLabel3.setText("Calculus");

        chkMean.setText("Mean");
        chkMean.setEnabled(false);
        chkMean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMeanActionPerformed(evt);
            }
        });

        chkMedian.setText("Median");
        chkMedian.setEnabled(false);
        chkMedian.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMedianActionPerformed(evt);
            }
        });

        chkStandardDeviation.setText("Standard Deviation");
        chkStandardDeviation.setEnabled(false);
        chkStandardDeviation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkStandardDeviationActionPerformed(evt);
            }
        });

        chkRank.setText("Rank Curve of the Scores");
        chkRank.setEnabled(false);
        chkRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRankActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkEnableStatisticalSummarization))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(chkMean)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkMedian)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkStandardDeviation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkRank)))))
                .addContainerGap(166, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkEnableStatisticalSummarization)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMean)
                    .addComponent(chkMedian)
                    .addComponent(chkStandardDeviation)
                    .addComponent(chkRank))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Sensitivity Analysis"));

        chkEnableStatisticalAnalysis.setText("Enable Statistical Analysis");
        chkEnableStatisticalAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEnableStatisticalAnalysisActionPerformed(evt);
            }
        });

        jLabel5.setText("Bin Size");

        txtBinSize.setEnabled(false);
        txtBinSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBinSizeActionPerformed(evt);
            }
        });
        txtBinSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBinSizeKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBinSizeKeyReleased(evt);
            }
        });

        chkItemPopularity.setText("Item Popularity");
        chkItemPopularity.setEnabled(false);
        chkItemPopularity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkItemPopularityActionPerformed(evt);
            }
        });

        chkHistorySize.setText("History Size");
        chkHistorySize.setEnabled(false);
        chkHistorySize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkHistorySizeActionPerformed(evt);
            }
        });

        chkUserBias.setText("User Bias");
        chkUserBias.setEnabled(false);
        chkUserBias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUserBiasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkEnableStatisticalAnalysis))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtBinSize, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(chkItemPopularity)
                                .addGap(26, 26, 26)
                                .addComponent(chkHistorySize)
                                .addGap(32, 32, 32)
                                .addComponent(chkUserBias)))))
                .addContainerGap(303, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkEnableStatisticalAnalysis)
                .addGap(12, 12, 12)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtBinSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkItemPopularity)
                    .addComponent(chkHistorySize)
                    .addComponent(chkUserBias))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Similarity Analysis"));

        chkSimilarityAnalysis.setText("Enable Similarity Analysis");
        chkSimilarityAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSimilarityAnalysisActionPerformed(evt);
            }
        });

        jLabel4.setText("Correlation Metrics");

        chkKendall.setText("Kendall");
        chkKendall.setEnabled(false);
        chkKendall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkKendallActionPerformed(evt);
            }
        });

        chkPearson.setText("Pearson");
        chkPearson.setEnabled(false);
        chkPearson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPearsonActionPerformed(evt);
            }
        });

        chkSpearman.setText("Spearman");
        chkSpearman.setEnabled(false);
        chkSpearman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSpearmanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chkSimilarityAnalysis))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(chkKendall, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkPearson)
                                .addGap(18, 18, 18)
                                .addComponent(chkSpearman)))))
                .addContainerGap(393, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chkSimilarityAnalysis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkKendall)
                    .addComponent(chkPearson)
                    .addComponent(chkSpearman))
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 775, Short.MAX_VALUE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("Characterization of Metrics", jPanel3);

        chkEnableCombinationAnalysis.setText("Enable Combination Analysis");
        chkEnableCombinationAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEnableCombinationAnalysisActionPerformed(evt);
            }
        });

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Linear Combination"));

        chkSVD.setText("Singular Value Decomposition (SVD)");
        chkSVD.setEnabled(false);
        chkSVD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSVDActionPerformed(evt);
            }
        });

        chkPCA.setText("Principal Components Analysis (PCA)");
        chkPCA.setEnabled(false);
        chkPCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPCAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkSVD)
                    .addComponent(chkPCA))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkSVD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkPCA)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Non-Linear Combination"));

        chkKPCA.setText("Kernel Principal Components Analysis (KPCA)");
        chkKPCA.setEnabled(false);
        chkKPCA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkKPCAActionPerformed(evt);
            }
        });

        jLabel7.setText("Kernel Function");

        lstKernel.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Rbfdot", "Polydot", "Laplacedot", "Vanilladot", "tanhdot", "besseldot", "anovadot", "splinedot" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstKernel.setEnabled(false);
        lstKernel.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstKernelValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(lstKernel);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkKPCA)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(chkKPCA)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Customized Combination"));

        btnCombinationMethods.setText("Load New Combination Methods");
        btnCombinationMethods.setEnabled(false);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Combination", "File"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(btnCombinationMethods)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 743, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCombinationMethods)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chkEnableCombinationAnalysis)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkEnableCombinationAnalysis)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Combination of Metrics", jPanel4);

        getContentPane().add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 810, 509));

        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });
        getContentPane().add(btnRun, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 550, 70, -1));

        btnHelp.setText("Help");
        getContentPane().add(btnHelp, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 550, 70, -1));
        getContentPane().add(lblStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 550, 630, 30));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    Checkbox metric 1 click event.
    */
    private void chkMetric1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMetric1ActionPerformed
        if (chkMetric1.isSelected()){
            parameters.setMetric(0);
        } else {
            parameters.unsetMetric(0);
        }
    }//GEN-LAST:event_chkMetric1ActionPerformed

    /*
    Checkbox metric 2 click event.
    */
    private void chkMetric2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMetric2ActionPerformed
        if (chkMetric2.isSelected()){
            parameters.setMetric(1);
        } else {
            parameters.unsetMetric(1);
        }
    }//GEN-LAST:event_chkMetric2ActionPerformed

    private void btnLoadNewMetricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadNewMetricsActionPerformed
        MetricSelection metricSelection = new MetricSelection();
        metricSelection.setVisible(true);
        this.setEnabled(false);
    }//GEN-LAST:event_btnLoadNewMetricsActionPerformed
    
    /*
    Button to Select the Consumption History Action Performed. 
    Loads a File dialog to select the file.
    */
    private void btnSelectConsumptionHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectConsumptionHistoryActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File(lastFolder));
        fc.setDialogTitle("Select the Consumption History file.");
        int returnVal = fc.showOpenDialog(UnexpectednessEvaluationFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            parameters.setConsumptionHistoryFile(file.getAbsoluteFile().toString());
            lblConsumptionHistory.setText(file.getName());
            lastFolder = file.getAbsoluteFile().toString();
        }
    }//GEN-LAST:event_btnSelectConsumptionHistoryActionPerformed

    /*
    Inserting Recommendation Lists
    */
    private void insertRecommendationList(File file, boolean isPPM){
        
        //Declarting Values
        int numberRecommendations = 0;
        int numberItems = 0;
        BufferedReader reader = null;
        String text;
        
        //Reading the fiel
        try {
            reader = new BufferedReader(new FileReader(file));

            while ((text = reader.readLine()) != null) {
                numberRecommendations++;
                String[] parts = text.split(" ");
                if (numberItems==0){
                    numberItems = parts.length-1;
                } else if (numberItems!=parts.length-1){
                   throw new IOException();
                }
                
            }
            
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (reader != null) {
                    reader.close();
                }
            } catch (IOException e) {
            }
        }
        
        //inserting in the table
        DefaultTableModel model = (DefaultTableModel) tblRecommendationLists.getModel();
        if (isPPM){
            if (parameters.getPPM().equals("")){
                if (parameters.setPPM(file.getAbsoluteFile().toString())==true){
                    model.addRow(new Object[]{contRecommendation, file.getName(), numberRecommendations, numberItems, "PPM", String.valueOf(file.length()/1024)+" KB"});
                } else {
                    showMessageDialog(null, "The select ppm is in the table as a recommendation list. Please choose another PPM or delete the recommendation list from the table.");
                }
            } else {
                if (parameters.setPPM(file.getAbsoluteFile().toString())==true){
                    model.addRow(new Object[]{contRecommendation, file.getName(), numberItems, numberRecommendations, "PPM", String.valueOf(file.length()/1024)+" KB"});
                    for (int i = 0 ; i < model.getRowCount() ; i++){
                        if (model.getValueAt(i, 4).equals("PPM")){
                            model.removeRow(i);
                        }
                    }
                    model.addRow(new Object[]{contRecommendation, file.getName(), numberRecommendations, numberItems, "PPM", String.valueOf(file.length()/1024)+" KB"});
                } else {
                    showMessageDialog(null, "The select ppm is in the table as a recommendation list. Please choose another PPM or delete the recommendation list from the table.");
                }
            }
            contRecommendation++;
        } else {
            int returnError = parameters.addRecommendationList(file.getAbsoluteFile().toString(), file.getName(), numberItems, contRecommendation);
            if (returnError==1){
                showMessageDialog(null, "The recommendation list is already the ppm.");
            } else if (returnError==2){
                showMessageDialog(null, "The recommendation list is already in the list.");
            } else{
                model.addRow(new Object[]{contRecommendation, file.getName(), numberRecommendations, numberItems, "Recommendation", String.valueOf(file.length()/1024)+" KB"});
                contRecommendation++;
            }
        }
    }
    
    /*
    Add new Recommendation lists to be analysed
    */
    private void btnAddRecommendationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddRecommendationActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File(lastFolder));
        fc.setDialogTitle("Select a Recommendation file.");
        int returnVal = fc.showOpenDialog(UnexpectednessEvaluationFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            insertRecommendationList(file, false);
            lastFolder = file.getAbsoluteFile().toString();
        }
    }//GEN-LAST:event_btnAddRecommendationActionPerformed

    private void btnSelectItemsFeaturesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectItemsFeaturesActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File(lastFolder));
        fc.setDialogTitle("Select the Items Features file.");
        int returnVal = fc.showOpenDialog(UnexpectednessEvaluationFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            parameters.setItemsFeatures(file.getAbsoluteFile().toString());
            lblItemsFeaturesFile.setText(file.getName());
            lastFolder = file.getAbsoluteFile().toString();
        }
    }//GEN-LAST:event_btnSelectItemsFeaturesActionPerformed

    /*
    Checkbox metric 3 click event.
    */
    private void chkMetric3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMetric3ActionPerformed
        if (chkMetric3.isSelected()){
            parameters.setMetric(2);
        } else {
            parameters.unsetMetric(2);
        }
    }//GEN-LAST:event_chkMetric3ActionPerformed

    /*
    Checkbox metric 4 click event.
    */
    private void chkMetric4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMetric4ActionPerformed
        if (chkMetric4.isSelected()){
            parameters.setMetric(3);
        } else {
            parameters.unsetMetric(3);
        }
    }//GEN-LAST:event_chkMetric4ActionPerformed

    /*
    Checkbox metric 5 click event.
    */
    private void chkMetric5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMetric5ActionPerformed
        if (chkMetric5.isSelected()){
            parameters.setMetric(4);
        } else {
            parameters.unsetMetric(4);
        }
    }//GEN-LAST:event_chkMetric5ActionPerformed

    /*
    Set the checkbox Statistical Summarization.
    */
    private void chkEnableStatisticalSummarizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEnableStatisticalSummarizationActionPerformed
        if (chkEnableStatisticalSummarization.isSelected()){
            chkMean.setEnabled(true);
            chkMedian.setEnabled(true);
            chkStandardDeviation.setEnabled(true);
            chkRank.setEnabled(true);
            parameters.setStatisticalSummarization(true);
        } else {
            chkMean.setEnabled(false);
            chkMedian.setEnabled(false);
            chkStandardDeviation.setEnabled(false);
            chkRank.setEnabled(false);
            parameters.setStatisticalSummarization(false);
        }
    }//GEN-LAST:event_chkEnableStatisticalSummarizationActionPerformed

    /*
    Set the checkbox Statistical Analysis.
    */
    private void chkEnableStatisticalAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEnableStatisticalAnalysisActionPerformed
        if (chkEnableStatisticalAnalysis.isSelected()){
            chkHistorySize.setEnabled(true);
            chkItemPopularity.setEnabled(true);
            chkUserBias.setEnabled(true);
            txtBinSize.setEnabled(true);
            parameters.setStatisticalAnalysis(true);
        } else {
            chkHistorySize.setEnabled(false);
            chkItemPopularity.setEnabled(false);
            chkUserBias.setEnabled(false);
            txtBinSize.setEnabled(false);
            parameters.setStatisticalAnalysis(false);
        }
    }//GEN-LAST:event_chkEnableStatisticalAnalysisActionPerformed

    /*
    Set the checkbox of similarity analysis.
    */
    private void chkSimilarityAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSimilarityAnalysisActionPerformed
        if (chkSimilarityAnalysis.isSelected()){
            chkKendall.setEnabled(true);
            chkPearson.setEnabled(true);
            chkSpearman.setEnabled(true);
            parameters.setSimilarityAnalysis(true);
        } else {
            chkKendall.setEnabled(false);
            chkPearson.setEnabled(false);
            chkSpearman.setEnabled(false);
            parameters.setSimilarityAnalysis(false);
        }
    }//GEN-LAST:event_chkSimilarityAnalysisActionPerformed

    /*
        Set the checkbox Mean, normal average.
    */
    private void chkMeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMeanActionPerformed
        if (chkMean.isSelected()){
            parameters.setMean(true);
        } else {
            parameters.setMean(false);
        }
    }//GEN-LAST:event_chkMeanActionPerformed

    /*
        Set the checkbox Median.
    */
    private void chkMedianActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMedianActionPerformed
        if (chkMedian.isSelected()){
            parameters.setMedian(true);
        } else {
            parameters.setMedian(false);
        }
    }//GEN-LAST:event_chkMedianActionPerformed

    /*
    Set the checkbox Stardard Deviation.
    */
    private void chkStandardDeviationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkStandardDeviationActionPerformed
        if (chkStandardDeviation.isSelected()){
            parameters.setSd(true);
        } else {
            parameters.setSd(false);
        }
    }//GEN-LAST:event_chkStandardDeviationActionPerformed

    /*
    Set the checkbox Rank Curve .
    */
    private void chkRankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRankActionPerformed
        if (chkRank.isSelected()){
            parameters.setRankcurve(true);
        } else {
            parameters.setRankcurve(false);
        }
    }//GEN-LAST:event_chkRankActionPerformed

    /*
    Set the checkbox Item popularity.
    */
    private void chkItemPopularityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkItemPopularityActionPerformed
        if (chkItemPopularity.isSelected()){
            parameters.setItemPopularity(true);
        } else {
            parameters.setItemPopularity(false);
        }
    }//GEN-LAST:event_chkItemPopularityActionPerformed

    /*
    Set the checkbox History Size.
    */
    private void chkHistorySizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkHistorySizeActionPerformed
        if (chkHistorySize.isSelected()){
            parameters.setHistorySize(true);
        } else {
            parameters.setHistorySize(false);
        }
    }//GEN-LAST:event_chkHistorySizeActionPerformed

    /*
    Set the checkbox User Bias.
    */
    private void chkUserBiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUserBiasActionPerformed
        if (chkUserBias.isSelected()){
            parameters.setUserBias(true);
        } else {
            parameters.setUserBias(false);
        }
    }//GEN-LAST:event_chkUserBiasActionPerformed

    /*
    Set the combination analysis
    */
    private void chkEnableCombinationAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEnableCombinationAnalysisActionPerformed
        if (chkEnableCombinationAnalysis.isSelected()){
            parameters.setCombinationAnalysis(true);
            chkSVD.setEnabled(true);
            chkPCA.setEnabled(true);
            chkKPCA.setEnabled(true);
            lstKernel.setEnabled(true);
            btnCombinationMethods.setEnabled(true);
        } else {
            parameters.setCombinationAnalysis(false);
            chkSVD.setEnabled(false);
            chkPCA.setEnabled(false);
            chkKPCA.setEnabled(false);
            lstKernel.setEnabled(false);
            btnCombinationMethods.setEnabled(false);
        }
    }//GEN-LAST:event_chkEnableCombinationAnalysisActionPerformed

    /*
    Set the svd analysis
    */
    private void chkSVDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSVDActionPerformed
        if (chkSVD.isSelected()){
            parameters.setSvd(true);
        } else {
            parameters.setSvd(false);
        }
    }//GEN-LAST:event_chkSVDActionPerformed

    /*
    Set the pca analysis
    */
    private void chkPCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPCAActionPerformed
        if (chkPCA.isSelected()){
            parameters.setPca(true);
        } else {
            parameters.setPca(false);
        }
    }//GEN-LAST:event_chkPCAActionPerformed

    /*
    Set KPCA analysis
    */
    private void chkKPCAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkKPCAActionPerformed
        if (chkKPCA.isSelected()){
            parameters.setKpca(true);
        } else {
            parameters.setKpca(false);
        }
    }//GEN-LAST:event_chkKPCAActionPerformed

    /*
    When selecting a kernel
    */
    private void lstKernelValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstKernelValueChanged
        String kernel = lstKernel.getSelectedValue();
        parameters.setKpcaKernelFunction(kernel);
    }//GEN-LAST:event_lstKernelValueChanged

    /*
    Button to run the experimentation
    */
    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        
        //Checking the consumption history before writing the file
        if (parameters.getConsumptionHistory().equals("")){
            showMessageDialog(null, "Consumption file is not selected.");
            return;
        }
        
        //Checking whether the items features file is selected.
        if (parameters.getItemsFeatures().equals("")){
            showMessageDialog(null, "Items Features file is not selected.");
            return;
        }
        
        //Checking whether any recommendation list is selected.
        if (parameters.getListRecommendationLists().size()==0){
            showMessageDialog(null, "No Recommendation list was selected..");
            return;
        }
        
        // checking whether the ppm was selected.
        if (parameters.getPPM().equals("")){
            showMessageDialog(null, "No PPM list was selected.");
            return;
        }
        
        //checking whether the outputfolder was selected.
        if (parameters.getOutputFolder().equals("")){
            showMessageDialog(null, "No output folder was selected.");
            return;
        }
        
        //Checking whether any metrics have been selected
        ArrayList<Boolean> metrics = parameters.getMetrics();
        int metricsSelectedCount = 0;
        for (Boolean m: metrics){
            if (m.booleanValue()==true){
                metricsSelectedCount++;
            }
        }
        if (metricsSelectedCount==0){
            showMessageDialog(null, "No metrics were selected.");
            return;
        }
        
        //Check whether the statistic summarization is ok.
        if (parameters.getStatisticalSummarization()==1){
            if ((parameters.getMean()==0) && (parameters.getMedian()==0) && (parameters.getSd()==0) && (parameters.getRankcurve()==0)){
                showMessageDialog(null, "Statistical Summarization is selected but no calculus were selected.");
                return;
            }
        }
        
        //Check whether the statistic analysis is ok.
        if (parameters.getStatisticalAnalysis()==1){
            if ((parameters.getHistorySize()==0) && (parameters.getItemPopularity()==0) && (parameters.getUserBias()==0)){
                showMessageDialog(null, "Statistical Analysis is selected but no calculus were selected.");
                return;
            }
            
            if (parameters.getBinSize()==0){
                showMessageDialog(null, "Invalid value for the bin size.");
                return;
            }
        }
        
        //Check whether the similarity analysis is ok.
        if (parameters.getSimilarityAnalysis()==1){
            if ((parameters.getKendall()==0) && (parameters.getPearson()==0)&&(parameters.getSpearman()==0)){
                showMessageDialog(null, "Similarity Analysis was selected but no correlation metric was selected.");
                return;
            }
        }
        
        //Check whether the combination parameters are ok.
        if (parameters.getCombinationAnalysis()==1){
            if ((parameters.getSvd()==0) && (parameters.getPca()==0) && (parameters.getKpca()==0)){
                showMessageDialog(null, "Combination Analysis was selected but no matriz factorization was selected.");
                return;
            }
        }
        
        //itearate throughout the rows of the table
        for (String key: parameters.getListRecommendationLists().keySet()){
            
            //Write the file in 
            try {
                PrintWriter writer = new PrintWriter("config", "UTF-8");

                //printing input output configuration // printing the remaining
                writer.print("#input output\n");
                writer.print("history=\""+parameters.getConsumptionHistory()+"\"\n");
                writer.print("featuresfile=\""+parameters.getItemsFeatures()+"\"\n");
                writer.print("recommendation=\""+key+"\"\n");
                writer.print("ppm=\""+parameters.getPPM()+"\"\n");
                writer.print("outputpath=\""+parameters.getOutputFolder()+"\"\n");
                writer.print("outputname=\""+parameters.getRecommendationListName(key)+"\"\n");
                writer.print("top=\""+parameters.getRecommendationListTopN(key)+"\"\n");


                //printing the metircs configuration
                writer.print("\n#metrics\n");
                writer.print("metrics=\""+parameters.getStringOfMetrics()+"\"\n");

                //printing the characterization
                writer.print("\n#characterization\n");
                writer.print("statisticalSummarization="+String.valueOf(parameters.getStatisticalSummarization())+"\n");
                writer.print("mean="+String.valueOf(parameters.getMean())+"\n");
                writer.print("median="+String.valueOf(parameters.getMedian())+"\n");
                writer.print("sd="+String.valueOf(parameters.getSd())+"\n");
                writer.print("rank="+String.valueOf(parameters.getRankcurve())+"\n");
                writer.print("statisticalAnalysis="+String.valueOf(parameters.getStatisticalAnalysis())+"\n");
                writer.print("binSize="+String.valueOf(parameters.getBinSize())+"\n");
                writer.print("itemPopularity="+String.valueOf(parameters.getItemPopularity())+"\n");
                writer.print("historysize="+String.valueOf(parameters.getHistorySize())+"\n");
                writer.print("userbias="+String.valueOf(parameters.getUserBias())+"\n");
                writer.print("similarity="+String.valueOf(parameters.getSimilarityAnalysis())+"\n");
                writer.print("kendall="+String.valueOf(parameters.getKendall())+"\n");
                writer.print("pearson="+String.valueOf(parameters.getPearson())+"\n");
                writer.print("spearman="+String.valueOf(parameters.getSpearman())+"\n");


                //printing the combination
                writer.print("#combination\n");
                writer.print("combination="+String.valueOf(parameters.getCombinationAnalysis())+"\n");
                writer.print("svd="+String.valueOf(parameters.getSvd())+"\n");
                writer.print("pca="+String.valueOf(parameters.getPca())+"\n");
                writer.print("kpca="+String.valueOf(parameters.getKpca())+"\n");
                writer.print("kernel=\""+String.valueOf(parameters.getKpcaKernelFunction())+"\"\n");


                writer.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(UnexpectednessEvaluationFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(UnexpectednessEvaluationFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //Running the runtime. It blocks the main threa, attempt to use new Thread and use
            // the swing utilities for invoke it later.
            Scanner scan = new Scanner(System.in);
            String line;
            try{
                Runtime rt = Runtime.getRuntime();
                String[] commands = {"bash","evaluateUnexpectedness.sh"};
                Process proc = rt.exec(commands);
                InputStream stdout = proc.getInputStream();

                BufferedReader reader = new BufferedReader(new InputStreamReader(stdout));

                while((line = reader.readLine())!=null){
                    lblStatus.setText(line);
                    executionLog = executionLog + line + "\n";
                }

            } catch (IOException e) {
                System.out.println("Erro.");
            }
            
        }
    }//GEN-LAST:event_btnRunActionPerformed

    private void txtBinSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBinSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBinSizeActionPerformed

    private void txtBinSizeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBinSizeKeyPressed
        try{
            parameters.setBinSize(Float.parseFloat(txtBinSize.getText()));
        } catch (Exception e){
            parameters.setBinSize(0);
            return;
        }
    }//GEN-LAST:event_txtBinSizeKeyPressed

    private void btnOutputFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutputFolderActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File(lastFolder));
        fc.setDialogTitle("Select the Output Directory.");
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(UnexpectednessEvaluationFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            parameters.setOutputFolder(file.getAbsoluteFile().toString());
            lblOutput.setText(".../"+file.getName());
            lastFolder = file.getAbsoluteFile().toString();
        }
    }//GEN-LAST:event_btnOutputFolderActionPerformed

    private void btnPPMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPPMActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new java.io.File(lastFolder));
        fc.setDialogTitle("Select the Primitive Prediction Model file.");
        int returnVal = fc.showOpenDialog(UnexpectednessEvaluationFrame.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            insertRecommendationList(file, true);
            lastFolder = file.getAbsoluteFile().toString();
        }
    }//GEN-LAST:event_btnPPMActionPerformed

    private void tblRecommendationListsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRecommendationListsMouseClicked
        int row = tblRecommendationLists.getSelectedRow();
        int col = tblRecommendationLists.getSelectedColumn();
        if (col==0){
            DefaultTableModel model = (DefaultTableModel) tblRecommendationLists.getModel();
            if (model.getValueAt(row, 4).equals("PPM")){
                parameters.setPPM("");
            } else {
                parameters.removeRecommendationList(Integer.parseInt(model.getValueAt(row, 0).toString()));
            }
            model.removeRow(tblRecommendationLists.getSelectedRow());
        }
    }//GEN-LAST:event_tblRecommendationListsMouseClicked

    private void chkKendallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkKendallActionPerformed
        if (chkKendall.isSelected()){
            parameters.setKendall(true);
        } else {
            parameters.setKendall(false);
        }
    }//GEN-LAST:event_chkKendallActionPerformed

    private void chkPearsonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPearsonActionPerformed
        if (chkPearson.isSelected()){
            parameters.setPearson(true);
        } else {
            parameters.setPearson(false);
        }
    }//GEN-LAST:event_chkPearsonActionPerformed

    private void chkSpearmanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSpearmanActionPerformed
        if (chkSpearman.isSelected()){
            parameters.setSpearman(true);
        } else {
            parameters.setSpearman(false);
        }
    }//GEN-LAST:event_chkSpearmanActionPerformed

    private void txtBinSizeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBinSizeKeyReleased
        try{
            parameters.setBinSize(Float.parseFloat(txtBinSize.getText()));
        } catch (Exception e){
            parameters.setBinSize(0);
            return;
        }
    }//GEN-LAST:event_txtBinSizeKeyReleased

    private void tblRecommendationListsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblRecommendationListsKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_ENTER){
            System.out.println("Cheguei");
            int row = tblRecommendationLists.getSelectedRow();
            int col = tblRecommendationLists.getSelectedColumn();
            if (col==1){
                DefaultTableModel model = (DefaultTableModel) tblRecommendationLists.getModel();
                parameters.changeNameGivenID(Integer.parseInt(model.getValueAt(row, 0).toString()), model.getValueAt(row, 1).toString());
            }
        }
    }//GEN-LAST:event_tblRecommendationListsKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UnexpectednessEvaluationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UnexpectednessEvaluationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UnexpectednessEvaluationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UnexpectednessEvaluationFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        parameters = new ParametersEvaluation();
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UnexpectednessEvaluationFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRecommendation;
    private javax.swing.JButton btnCombinationMethods;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnLoadNewMetrics;
    private javax.swing.JButton btnOutputFolder;
    private javax.swing.JButton btnPPM;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnSelectConsumptionHistory;
    private javax.swing.JButton btnSelectItemsFeatures;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkEnableCombinationAnalysis;
    private javax.swing.JCheckBox chkEnableStatisticalAnalysis;
    private javax.swing.JCheckBox chkEnableStatisticalSummarization;
    private javax.swing.JCheckBox chkHistorySize;
    private javax.swing.JCheckBox chkItemPopularity;
    private javax.swing.JCheckBox chkKPCA;
    private javax.swing.JCheckBox chkKendall;
    private javax.swing.JCheckBox chkMean;
    private javax.swing.JCheckBox chkMedian;
    private javax.swing.JCheckBox chkMetric1;
    private javax.swing.JCheckBox chkMetric2;
    private javax.swing.JCheckBox chkMetric3;
    private javax.swing.JCheckBox chkMetric4;
    private javax.swing.JCheckBox chkMetric5;
    private javax.swing.JCheckBox chkPCA;
    private javax.swing.JCheckBox chkPearson;
    private javax.swing.JCheckBox chkRank;
    private javax.swing.JCheckBox chkSVD;
    private javax.swing.JCheckBox chkSimilarityAnalysis;
    private javax.swing.JCheckBox chkSpearman;
    private javax.swing.JCheckBox chkStandardDeviation;
    private javax.swing.JCheckBox chkUserBias;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable3;
    private javax.swing.JLabel lblConsumptionHistory;
    private javax.swing.JLabel lblItemsFeaturesFile;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JList<String> lstKernel;
    private javax.swing.JTable tblNewMetrics;
    private javax.swing.JTable tblRecommendationLists;
    private javax.swing.JTextField txtBinSize;
    // End of variables declaration//GEN-END:variables
}
